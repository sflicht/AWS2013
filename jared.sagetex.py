## -*- encoding: utf-8 -*-
# This file was *autogenerated* from the file ./jared.sagetex.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_97 = Integer(97); _sage_const_9 = Integer(9); _sage_const_8 = Integer(8); _sage_const_29 = Integer(29); _sage_const_22 = Integer(22); _sage_const_41 = Integer(41); _sage_const_119 = Integer(119); _sage_const_86 = Integer(86); _sage_const_87 = Integer(87); _sage_const_155 = Integer(155); _sage_const_154 = Integer(154); _sage_const_153 = Integer(153); _sage_const_152 = Integer(152); _sage_const_151 = Integer(151); _sage_const_36 = Integer(36); _sage_const_11 = Integer(11); _sage_const_10 = Integer(10); _sage_const_17 = Integer(17); _sage_const_35 = Integer(35); _sage_const_37 = Integer(37); _sage_const_50 = Integer(50); _sage_const_79 = Integer(79); _sage_const_106 = Integer(106); _sage_const_144 = Integer(144); _sage_const_145 = Integer(145); _sage_const_146 = Integer(146); _sage_const_141 = Integer(141)## This file (jared.sagetex.sage) was *autogenerated* from jared.tex with sagetex.sty version 2012/01/16 v2.3.3-69dcb0eb93de.
import sagetex
_st_ = sagetex.SageTeXProcessor('jared', version='2012/01/16 v2.3.3-69dcb0eb93de', version_check=True)
_st_.blockbegin()
try:
 q = _sage_const_2 
 Fq = GF(q, names=('a',)); (a,) = Fq._first_ngens(1)
 Fqx = Fq.list()[:]; Fqx.remove(_sage_const_0 )
except:
 _st_.goboom(_sage_const_17 )
_st_.blockend()
_st_.blockbegin()
try:
 bound = _sage_const_10 
except:
 _st_.goboom(_sage_const_22 )
_st_.blockend()
_st_.blockbegin()
try:
 vars = ["t"] + ["t_"+str(i) for i in range(_sage_const_1 ,bound+_sage_const_1 )]
 R0 = PolynomialRing(Fq,vars)
 I = R0.ideal([R0(vars[i])**q-R0(vars[i-_sage_const_1 ]) for i in range(_sage_const_1 ,bound+_sage_const_1 )])
 R = R0.quo(I)
except:
 _st_.goboom(_sage_const_29 )
_st_.blockend()
_st_.blockbegin()
try:
 t = R.gens()[_sage_const_0 ]
 t_1,t_2,t_3,t_4 = var("t_1,t_2,t_3,t_4")
 [t_1,t_2,t_3,t_4] = R.gens()[_sage_const_1 :_sage_const_5 ]
except:
 _st_.goboom(_sage_const_35 )
_st_.blockend()
try:
 _st_.inline(_sage_const_0 , latex(t_4**(q**_sage_const_4 )-t))
except:
 _st_.goboom(_sage_const_36 )
try:
 _st_.inline(_sage_const_1 , latex(t*t_1==t_1**(q+_sage_const_1 )))
except:
 _st_.goboom(_sage_const_37 )
try:
 _st_.inline(_sage_const_2 , latex(_sage_const_5 /q**_sage_const_2 ))
except:
 _st_.goboom(_sage_const_41 )
_st_.blockbegin()
try:
 def v(r):
     S = PolynomialRing(Fq, names=('x',)); (x,) = S._first_ngens(1)
     phi = R0.hom([x]+[_sage_const_0  for i in range(bound)],S)
     s0 = (r**(q**bound)).lift() # lift r to a polynomial
     s = phi(s0)
     return s.valuation() / (q**bound)
except:
 _st_.goboom(_sage_const_50 )
_st_.blockend()
_st_.blockbegin()
try:
 print "Defining v(r)"
 def v(r):
     if r == _sage_const_0 :
         return Infinity
     r1 = r/r.lc()
     mvs = []
     d = zip(R.variable_names(),
                  ["("+str(q**(-i))+")" for i in range(len(R.variable_names()))])
     #       probably should build this dict once and store it,
     #       rather than creating it every time v(r) is called
     d.append(("*","+"))
     d.append(("^","*"))
     while r1 != _sage_const_0 :
         r1 = r1/r1.lc()
         #print r1.lift()
         m = r1.lm() # get the normalized leading monomial
         ms = str(m) # turn this into a string
         for dd in d:
             ms = ms.replace(dd[_sage_const_0 ],dd[_sage_const_1 ])
         mv = QQ(sage.calculus.calculus.symbolic_expression_from_string(ms))
        # mv is the valuation of the leading monomial of r1
         mvs.append(mv)
         r1 = r1 - m
     return min(mvs)
except:
 _st_.goboom(_sage_const_79 )
_st_.blockend()
_st_.blockbegin()
try:
 r = var("r")
 r = t_2**_sage_const_5  + t_4**(q**_sage_const_10 )
except:
 _st_.goboom(_sage_const_86 )
_st_.blockend()
try:
 _st_.inline(_sage_const_3 , latex(v(r)))
except:
 _st_.goboom(_sage_const_87 )
_st_.blockbegin()
try:
 def A(n):
     return map(flatten, CartesianProduct(Fqx,map(list,VectorSpace(Fq,n-_sage_const_1 ).list())))
except:
 _st_.goboom(_sage_const_97 )
_st_.blockend()
_st_.blockbegin()
try:
 def pi(n):
     t_n = R.gens()[n]
     return prod([sum([a[i]*t_n**(q**i) for i in range(n)]) for a in A(n)])
except:
 _st_.goboom(_sage_const_106 )
_st_.blockend()
_st_.blockbegin()
try:
 print pi(_sage_const_1 )
 print pi(_sage_const_2 )
 print pi(_sage_const_3 )
 def prettyPrint(r):
     d = zip(map(str,R.gens()),vars)
     s = str(r)
     for dd in d:
         s = s.replace(dd[_sage_const_0 ],dd[_sage_const_1 ])
     r.rename(s)
     return r
except:
 _st_.goboom(_sage_const_119 )
_st_.blockend()
_st_.blockbegin()
try:
 pi_1 = pi(_sage_const_1 )
 print _sage_const_1 
 pi_2 = pi(_sage_const_2 )
 print _sage_const_2 
 pi_3 = pi(_sage_const_3 )
 print _sage_const_3 
 pi_4 = pi(_sage_const_4 )
 print _sage_const_4 
 pi_5 = pi(_sage_const_5 )
 #print 5
 pi_6 = pi(_sage_const_6 )
 #print 6
 #pi_7 = pi(7)
 #print 7
 #pi_8 = pi(8)
 #print 8
 #pi_9 = pi(9)
 #print 9
except:
 _st_.goboom(_sage_const_141 )
_st_.blockend()
try:
 _st_.inline(_sage_const_4 , latex(pi_1.lift()))
except:
 _st_.goboom(_sage_const_144 )
try:
 _st_.inline(_sage_const_5 , latex(pi_2.lift()))
except:
 _st_.goboom(_sage_const_145 )
try:
 _st_.inline(_sage_const_6 , latex(pi_3.lift()))
except:
 _st_.goboom(_sage_const_146 )
try:
 _st_.inline(_sage_const_7 , latex(v(pi_2-pi_1)))
except:
 _st_.goboom(_sage_const_151 )
try:
 _st_.inline(_sage_const_8 , latex(v(pi_3-pi_2)))
except:
 _st_.goboom(_sage_const_152 )
try:
 _st_.inline(_sage_const_9 , latex(v(pi_4-pi_3)))
except:
 _st_.goboom(_sage_const_153 )
try:
 _st_.inline(_sage_const_10 , latex(v(pi_5-pi_4)))
except:
 _st_.goboom(_sage_const_154 )
try:
 _st_.inline(_sage_const_11 , latex(v(pi_6-pi_5)))
except:
 _st_.goboom(_sage_const_155 )
_st_.endofdoc()
